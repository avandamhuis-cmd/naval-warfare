<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Minimalist Naval Warfare Prototype</title>
  <style>
    body { margin: 0; overflow: hidden; }
    canvas { display: block; }
  </style>
</head>
<body>
  <script src="https://cdn.jsdelivr.net/npm/three@0.152.2/build/three.min.js"></script>
  <script>
    // --- SCENE SETUP ---
    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0x87CEEB); // sky blue

    const camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer();
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    // --- LIGHT ---
    const light = new THREE.DirectionalLight(0xffffff, 1);
    light.position.set(5, 10, 5);
    scene.add(light);

    // --- GROUND (Ocean)
    const oceanGeometry = new THREE.PlaneGeometry(200, 200);
    const oceanMaterial = new THREE.MeshPhongMaterial({ color: 0x1E90FF, side: THREE.DoubleSide });
    const ocean = new THREE.Mesh(oceanGeometry, oceanMaterial);
    ocean.rotation.x = -Math.PI / 2;
    scene.add(ocean);

    // --- TEAMS ---
    function createBoxCharacter(color, x, z) {
      const geometry = new THREE.BoxGeometry(1, 2, 1);
      const material = new THREE.MeshPhongMaterial({ color: color });
      const box = new THREE.Mesh(geometry, material);
      box.position.set(x, 1, z);
      scene.add(box);
      return box;
    }

    const redTeam = createBoxCharacter(0xff0000, -5, 0);
    const blueTeam = createBoxCharacter(0x0000ff, 5, 0);

    // --- PLAYER CAMERA ---
    camera.position.set(0, 5, 10);
    camera.lookAt(0, 1, 0);

    // --- SIMPLE ANIMATION ---
    function animate() {
      requestAnimationFrame(animate);
      redTeam.rotation.y += 0.01; // spin for now
      blueTeam.rotation.y -= 0.01;
      renderer.render(scene, camera);
    }
    animate();

    // --- RESIZE HANDLER ---
    window.addEventListener('resize', () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    });
  </script>
</body>
</html>
